# Set time zone
echo Setting time zone and language
ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime
sed -i '/^#\(ko_KR.UTF-8 UTF-8\|en_US.UTF-8 UTF-8\) /s/^#//g' /etc/locale.gen
echo LANG=en_US.UTF-8 > /etc/locale.conf
locale-gen

# Create new user and set privileges
echo Creating new user
do_proceed="n"
while [ "${do_proceed}" == "n" ] || [ "${do_proceed}" == "N" ]; do
	read -p "Please type your username: " username
	if [ "${username}" == "" ]; then
		echo Username can\'t be an empty string.
	else
		echo Username will be ${username}
		echo Hostname will be ${username}-pc
		read -p "Are these correct?(y/n)" do_proceed
	fi
done

echo "${username}-pc" >> /etc/hostname
echo "127.0.0.1 localhost\n::1 localhost\n127.0.1.1 ${username}-pc.org" >> /etc/hosts

useradd ${username} -g users -G storage,wheel,power -m -s /bin/bash
read -s -p "Enter new password for ${username}: (input is not visible)" userpw
echo ${username}:${userpw} | chpasswd
echo
read -s -p "Enter new password for root: (leave empty if you want to use user's pw)" rootpw
if [ "${rootpw}" != "" ]; then
	echo "root:${rootpw}" | chpasswd
else
	echo "root:${userpw}" | chpasswd
fi

# Create symlink
if [[ "${partition_hdd}" != "" ]]; then
	echo
	echo Creating symlinks for the following directories:
	rm /home/${username}/Downloads /home/${username}/Documents /home/${username}/Videos /home/${username}/Pictures /home/${username}/Music
	echo /home/${username}/Downloads
	echo /home/${username}/Documents
	echo /home/${username}/Videos
	echo /home/${username}/Pictures
	echo /home/${username}/Music

	mkdir /home/${username}/Desktop

	ln -s /hdd/Pictures /home/${username}/Pictures
	ln -s /hdd/Videos /home/${username}/Videos
	ln -s /hdd/Downloads /home/${username}/Downloads
	ln -s /hdd/Music /home/${username}/Music
	ln -s /hdd/Documents /home/${username}/Documents
fi

# Install packages
echo Installing packages...
pacman -Syyu
pacman -S base-devel
yes | pacman -S sudo git vim wget yajl > dev/null

echo "echo Installing pamac-AUR for GUI package managing
cd /tmp
git clone https://aur.archlinux.org/package-query.git
cd package-query/
makepkg -si && cd /tmp/
git clone https://aur.archlinux.org/yaourt.git
cd yaourt/
makepkg -si
yaourt -S pamac-aur
cd ~" > /home/${username}/Desktop/install_aur
chmod +x /home/${username}/Desktop/install_aur

# Install bootloader
containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 1; done
  return 0
}

fdisk -l
fdisk_output=( $(fdisk -l) )
for (( i=$(( ${#fdisk_output[@]} - 1 )); i>=0; i--)); do
	if [[ ${fdisk_output[$i]} =~ "/dev/" ]]; then
		:
	else
		unset fdisk_output[$i]
	fi
done

check_flag=0
while [ "${check_flag}" == 0 ]; do
	install_grub=1
	check_flag=1
	read -p "Enter boot partition(Leave empty if don't want to install bootloader): " partition_boot
	containsElement "${partition_boot}" "${fdisk_output[@]}"
	res=$?
	if [ "${res}" != 1 ] || [ "${partition_boot}" == "" ]; then
		install_grub=0
	fi

	if [ "${install_grub}" == 0 ] && [ "${partition_boot}" != "" ]; then
		echo -e "${GREEN}Boot${NC} device name is incorrect (or does not exist)"
		check_flag=0
		fi
done

if [ "${partition_boot}" != "" ]; then
	fdisk_output=()
	while IFS= read -r line; do
	    fdisk_output+=( "$line" )
	done < <( fdisk -l )

	for line in "${fdisk_output[@]}"; do
		if [[ $line == *"EFI System"* ]]; then
			line_split=( $line )
			partition_boot=${line_split[0]}
		else
			partition_boot=""
		fi

		if [[ $line == *"Microsoft reserved"* ]]; then
			has_windows=1
		else
			has_windows=0
		fi
	done

	if [ "${has_windows}" == 1 ]; then
		pacman -S os-prober
		mkdir /windows
		mount ${partition_windows} /windows
		os-prober
	fi	

	if [ "${partition_boot}" != "" ]; then
		# is UEFI
		pacman -S grub efibootmgr
		mkdir /esp
		mount ${partition_boot} /esp
		grub-install --target=x86_64-efi --efi-directory=esp --bootloader-id=GRUB
		grub-mkconfig -o /boot/grub/grub.cfg
		umount f/esp
		rm -rf /esp
	else
		# TODO:
		# grub-install --target=i386-pc ${partition_boot}
	fi

	if [ "${has_windows}" == 1 ]; then
		umount /windows
		rm -rf /windows
	fi
fi


read -p "This system will install Gnome desktop environment(GDM) by default. Continue?(y/n)" install_gdm
if [ "${install_gdm}" != "n" ] && [ "${install_gdm}" != "N" ]; then
	pacman -S xorg xorg-server
	pacman -S gnome
	systemctl enable gdm.service
else
	echo "You may install any other desktop environment"
fi

read -p "Do you want to install fcitx for Korean?(y/n)" install_fcitx
if [ "${install_fcitx}" != "n" ] && [ "${install_fcitx}" != "N" ]; then
	pacman -S fcitx fcitx-hangul fcitx-qt5 fcitx-configtool
fi

read -p "Do you want to install CUDA-toolkit, NVIDIA for development?(y/n)" install_cuda_nvidia
if [ "${install_cuda_nvidia}" != "n" ] && [ "${install_cuda_nvidia}" != "N" ]; then
	pacman -S linux nvidia cuda
fi
