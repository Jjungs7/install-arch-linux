#!/bin/bash

# script global variables
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m'

AVAILABLE_COUNTRY_CODES=() # TODO
COUNTRY_CODES=('KR', 'TW', 'HK', 'JP') # TODO: use selected countries


# Welcome
echo This script will install arch linux on your system
echo -e "Please make sure that your booting system is ${RED}UEFI${NC} based"
echo
echo "    # If you are using BIOS then you can comment bootloader specific lines"
echo "    # and install bootloader for yourself"
echo
echo "To automatically install programs, you may need to get connected to the internet"
echo Otherwise you may have to install for yourself
echo
echo "    # You can check your internet connection with the following command"
echo "    # ping archlinux.org"
echo
read -p "Do you want to proceed with the installation?(y/n)" do_install

if [ "${do_install}" == "n" ] || [ "${do_install}" == "N" ]; then
	exit
fi

echo
echo
echo "This script needs you to make partitions manually."
echo -e "You can make(or change, delete) partitions with tools like ${BLUE}cfdisk${NC} or ${BLUE}parted${NC}"
echo
read -p "Are your partitions ready for installation?(y/n)" is_ready
if [ "${is_ready}" == "n" ] || [ "${is_ready}" == "N" ]; then
	echo
	echo
	echo "Please make sure all partitions are ready"
	echo "Recommended partitions to create are:"
	echo
	echo /
	echo /home
	echo "/hdd (if any)"
	echo "swap (if any)"
	echo
	echo "    # Swap partitions usually have size of (ram_size * 2)"
	echo "    # / and /home partitions are relatively smaller than /hdd"
	echo "    # OS, user programs are stored in a SSD(/, /home) and multimedia files in a HDD(/hdd)"
	echo "    # swap partitions are specially needed if you use a lot of memory(ex. computer vision tasks)"
	echo "    # and it is recommended to create the swap partition in HDD"
	echo
	echo "If you don't have /boot (It has to be EFI system partition) You may create a partition for /boot too"
	echo "Check how to in this link https://bit.ly/2ExmFid"
	exit
fi

# Get partitions
containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 1; done
  return 0
}

fdisk -l
echo
echo "Please enter the device names for your partition. (/dev/sdaX or /dev/nvme0n1pX. X is partition number)"
echo -e "Ex) ${BLUE}/dev/sda5${NC}"
echo -e "${RED}root${NC} and ${YELLOW}home${NC} partitions are required"
check_flag=0
fdisk_output=( $(fdisk -l) )
for (( i=$(( ${#fdisk_output[@]} - 1 )); i>=0; i--)); do
	if [[ ${fdisk_output[$i]} =~ "/dev/" ]]; then
		:
	else
		unset fdisk_output[$i]
	fi
done

while [ "${check_flag}" == 0 ]; do
	check_flag=1
	read -p "Enter root partition: " partition_root
	containsElement "${partition_root}" "${fdisk_output[@]}"
	res=$?
	if [ "${res}" != 1 ] || [ "${partition_root}" == "" ]; then
		echo -e "${RED}root${NC} device name does not exist"
		check_flag=0
		continue
	fi
done

check_flag=0
while [ "${check_flag}" == 0 ]; do
	check_flag=1
	read -p "Enter home partition: " partition_home
	containsElement "${partition_home}" "${fdisk_output[@]}"
	res=$?
	if [ "${res}" != 1 ] || [ "${partition_home}" == "" ]; then
		echo -e "${YELLOW}home${NC} device name does not exist"
		check_flag=0
	fi
done
	
check_flag=0
while [ "${check_flag}" == 0 ]; do
	swap_exists=1
	check_flag=1
	read -p "Enter swap partition(leave empty if not needed): " partition_swap
	containsElement "${partition_swap}" "${fdisk_output[@]}"
	res=$?
	if [ "${res}" != 1 ] || [ "${partition_swap}" == "" ]; then
		swap_exists=0
	fi

	if [ "${swap_exists}" == 0 ] && [ "${partition_swap}" != "" ]; then
		echo -e "${BLUE}Swap${NC} device name is incorrect (or does not exist)"
		check_flag=0
	fi
done

check_flag=0
while [ "${check_flag}" == 0 ]; do
	hdd_exists=1
	check_flag=1
	read -p "Enter hdd partition(leave empty if not needed): " partition_hdd
	containsElement "${partition_hdd}" "${fdisk_output[@]}"
	res=$?
	if [ "${res}" != 1 ] || [ "${partition_hdd}" == "" ]; then
		hdd_exists=0
	fi

	if [ "${hdd_exists}" == 0 ] && [ "${partition_hdd}" != "" ]; then
		echo -e "${GREEN}hdd${NC} device name is incorrect (or does not exist)"
		check_flag=0
	fi
done

# Format and mount root
echo
echo Mounting created partition onto /mnt
mkfs.ext4 ${partition_root} > /dev/null
mount ${partition_root} /mnt > /dev/null

# Change pacman mirror of live Linux
yes | pacman -S pacman-contrib > /dev/null
cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
echo Refreshing pacman mirrors. This may take some time...
curl -s "https://www.archlinux.org/mirrorlist/?country=KR&country=TW&country=HK&country=JP&protocol=https&ip_version=4&use_mirror_status=on" | sed -e 's/^#Server/Server/' | rankmirrors -n 6 - > /etc/pacman.d/mirrorlist
pacman -Sy
echo Successfully refreshed mirrors

# Install arch_linux
echo Installing arch linux into /mnt. This may take some time...
pacstrap /mnt base
echo Finished installing arch linux

# Format and mount remaining partitions
echo
echo Mounting remaining partitions
mkdir /mnt/hdd
mkfs.ext4 ${partition_home} > /dev/null
mkfs.ext4 ${partition_hdd} > /dev/null
mkswap ${partition_swap} > /dev/null
swapon ${partition_swap} > /dev/null
mount ${partition_home} /mnt/home > /dev/null
mount ${partition_hdd} /mnt/hdd > /dev/null
genfstab -U /mnt >> /mnt/etc/fstab > /dev/null

# Change pacman mirror
cat /etc/pacman.d/mirrorlist > /mnt/etc/pacman.d/mirrorlist

# Chroot into installed linux
echo "#!bin/bash
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
NC='\033[0m'
partition_root=\"${partition_root}\"
partition_home=\"${partition_home}\"
partition_swap=\"${partition_swap}\"
partition_hdd=\"${partition_hdd}\"\n\n" | cat - apply_settings > temp && mv temp apply_settings

chmod +x apply_settings
cp ./apply_settings /mnt
echo
echo Chrooting into /mnt
arch-chroot /mnt /apply_settings
